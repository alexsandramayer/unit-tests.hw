1)  Почему использование тестовых заглушек может быть полезным при написании модульных тестов?

Использование тестовых заглушек может быть полезным при написании модульных тестов потому,
что они позволяют имитировать поведение зависимых компонентов или внешних ресурсов,
тем самым упрощая и ускоряя процесс тестирования. Заглушки можно использовать для создания предсказуемого ответа
от зависимых компонентов или ресурсов, что позволяет проверить работу модуля в изолированном окружении и исключить
внешние факторы, такие как сетевые проблемы или сложные зависимости. Таким образом, тесты с использованием заглушек
помогают выявить и исправить ошибки и дефекты в модуле до его интеграции с другими компонентами системы.


2) Какой тип тестовой заглушки следует использовать, если вам нужно проверить, что метод был вызван с определенными аргументами?

Если нужно проверить, что метод был вызван с определенными аргументами, следует использовать тестовую заглушку,
называемую "заглушкой-шпионом" (spy). Заглушка-шпион позволяет не только имитировать поведение зависимого компонента,
но и сохранять информацию о вызове методов и переданных им аргументах. Таким образом, после выполнения теста можно
проверить, был ли метод вызван с ожидаемыми аргументами, что поможет убедиться в правильности работы тестируемого метода.


3) Какой тип тестовой заглушки следует использовать, если вам просто нужно вернуть определенное значение или исключение в ответ на вызов метода?

Если просто нужно вернуть определенное значение или исключение в ответ на вызов метода, следует использовать тестовую заглушку,
называемую stub. Эта заглушка позволяет задать заранее определенное значение, которое будет возвращено при вызове определенного
метода. Заглушка stub особенно полезна, когда хотим поместить компонент в определенное состояние для тестирования определенных
ветвей исполнения кода.

4) Какой тип тестовой заглушки вы бы использовали для имитации  взаимодействия с внешним API или базой данных?

Для имитации взаимодействия с внешним API или базой данных в рамках unit-тестов, можно использовать "заглушку-подделку" (fake).
Заглушка-подделка представляет собой реализацию альтернативного компонента, который имитирует поведение внешнего API или базы данных.
Заглушка-подделка может хранить данные в памяти или использовать другой механизм для хранения данных вместо реальной базы данных.
Она обычно предоставляет простой интерфейс, который имитирует методы и функциональность реального внешнего компонента.
.
